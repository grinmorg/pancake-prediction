import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ethers } from 'ethers';
import { TelegramService } from '../telegram-bot/telegram.service';
import { predictionAbi } from './pancake-prediction-abi';
import axios from 'axios';

const CONTRACT_ADDRESS = '0x18b2a687610328590bc8f2e5fedde3b582a49cda';

interface Round {
  epoch: number;
  startTimestamp: number;
  lockTimestamp: number;
  closeTimestamp: number;
  lockPrice: bigint;
  closePrice: bigint;
  totalAmount: bigint;
  bullAmount: bigint;
  bearAmount: bigint;
  oracleCalled: boolean;
  canBet: boolean;
}

interface BetStream {
  id: number;
  currentAmount: bigint;
  lossCount: number;
  lastEpoch: number | null;
  positionHistory: Array<'Bull' | 'Bear'>;
  consecutiveLosses: number; // –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
  active: boolean; // –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∏–º–∞
  winCount: number; // –î–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–±–µ–¥
  totalBets: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫
  totalWins: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
}

interface BetHistory {
  epoch: number;
  position: 'Bull' | 'Bear';
  amount: bigint;
  claimed: boolean;
  streamId: number;
}

@Injectable()
export class PredictionService implements OnModuleInit {
  private readonly BASE_LOSS_MULTIPLIER = 21n; // 2.1x –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
  private readonly BASE_BET_MULTIPLIER = 5n; // 1x - min bet usually 0.6$
  private readonly BET_SECONDS_BEFORE_END = 8;
  private readonly logger = new Logger(PredictionService.name);
  private provider: ethers.JsonRpcProvider;
  private wallet: ethers.Wallet;
  private contract: ethers.Contract;
  private baseBetAmount: bigint;
  private betHistory: BetHistory[] = [];
  private activeStreams: BetStream[] = [];
  private readonly MAX_STREAMS = 2;
  private lastUsedStreamIndex = 0;

  private dailyPnL: number = 0;
  private dailyResetTimer: NodeJS.Timeout;
  private currentBnbPrice: number = 0;

  // –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  private readonly MAX_CONSECUTIVE_LOSSES = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
  private readonly MAX_BET_PERCENTAGE = 0.07; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π % –æ—Ç –±–∞–Ω–∫—Ä–æ–ª–ª–∞ –Ω–∞ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É (7%)
  private readonly STREAM_COOLDOWN_ROUNDS = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –ø–∞—É–∑—ã –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∏–º–∞
  private streamCooldowns: Record<number, number> = {}; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞—É–∑—ã –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤
  private maxBetAmount: bigint; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
  private totalBankroll: bigint; // –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±–∞–Ω–∫—Ä–æ–ª–ª–∞

  constructor(
    private readonly config: ConfigService,
    private readonly telegramService: TelegramService,
  ) {}

  async onModuleInit() {
    await this.initializeProvider();
    await this.initializeContract();

    this.activeStreams = Array.from({ length: this.MAX_STREAMS }, (_, i) => ({
      id: i + 1,
      currentAmount: this.baseBetAmount,
      lossCount: 0,
      lastEpoch: null,
      positionHistory: [],
      consecutiveLosses: 0,
      active: true,
      winCount: 0,
      totalBets: 0,
      totalWins: 0,
    }));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–Ω–∫—Ä–æ–ª–ª–∞
    this.totalBankroll = await this.provider.getBalance(this.wallet.address);
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–Ω–∫—Ä–æ–ª–ª–∞
    this.updateMaxBetAmount();

    this.listenToEvents();
    this.startBettingStrategy();

    this.startDailyReset();
    this.startBnbPriceUpdater();
    this.startBankrollMonitor();
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏
  private async updateMaxBetAmount() {
    this.totalBankroll = await this.provider.getBalance(this.wallet.address);
    this.maxBetAmount =
      (this.totalBankroll * BigInt(Math.floor(this.MAX_BET_PERCENTAGE * 100))) /
      100n;
    this.logger.log(
      `Updated max bet amount: ${ethers.formatEther(this.maxBetAmount)} BNB`,
    );
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–Ω–∫—Ä–æ–ª–ª–∞
  private startBankrollMonitor() {
    setInterval(async () => {
      await this.updateMaxBetAmount();

      const balanceBNB = ethers.formatEther(this.totalBankroll);
      const balanceUSD = parseFloat(balanceBNB) * this.currentBnbPrice;

      this.sendTelegramMessage(
        `üí∞ Bankroll Update\n` +
          `Balance: ${balanceBNB} BNB ($${balanceUSD.toFixed(2)})\n` +
          `Max bet: ${ethers.formatEther(this.maxBetAmount)} BNB`,
      );
    }, 3600_000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
  }

  private async initializeProvider() {
    try {
      const privateKey = this.config.get<string>('WALLET_PRIVATE_KEY');
      if (!privateKey?.startsWith('0x')) {
        throw new Error('Invalid private key format. Must start with 0x');
      }

      this.provider = new ethers.JsonRpcProvider(
        this.config.get('BSC_RPC_URL') || 'https://bsc-dataseed.binance.org/',
        { name: 'binance', chainId: 56 },
      );

      this.wallet = new ethers.Wallet(privateKey, this.provider);

      this.logger.log(`Connected to BSC network`);
      this.logger.log(`Operator address: ${this.wallet.address}`);
      this.logger.log(
        `Balance: ${ethers.formatEther(await this.provider.getBalance(this.wallet.address))} BNB`,
      );
    } catch (error) {
      this.logger.error('Provider initialization failed', error.stack);
      throw error;
    }
  }

  private async initializeContract() {
    this.contract = new ethers.Contract(
      CONTRACT_ADDRESS,
      predictionAbi,
      this.wallet,
    );

    this.baseBetAmount =
      (await this.contract.minBetAmount()) * this.BASE_BET_MULTIPLIER;
    this.logger.log(
      `Min bet amount: ${ethers.formatEther(this.baseBetAmount)} BNB`,
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
    this.totalBankroll = await this.provider.getBalance(this.wallet.address);
    this.maxBetAmount =
      (this.totalBankroll * BigInt(Math.floor(this.MAX_BET_PERCENTAGE * 100))) /
      100n;
    this.logger.log(
      `Max bet amount: ${ethers.formatEther(this.maxBetAmount)} BNB`,
    );
  }

  private listenToEvents() {
    this.contract.on('LockRound', async (epoch, price) => {
      const round = await this.getRoundData(epoch);
      const total = BigInt(round.totalAmount);
      const treasuryFee = (total * 300n) / 10000n;
      const prizePool = total - treasuryFee;
      const bullPayout =
        round.bullAmount > 0n ? prizePool / round.bullAmount : 0n;
      const bearPayout =
        round.bearAmount > 0n ? prizePool / round.bearAmount : 0n;

      const message =
        `üîí Round #${epoch} locked at ${ethers.formatEther(price)}\n` +
        `üìä Total bets: ${ethers.formatEther(total)} BNB\n` +
        `üêÇ Bull: ${ethers.formatEther(round.bullAmount)} BNB | Payout: x${bullPayout}\n` +
        `üêª Bear: ${ethers.formatEther(round.bearAmount)} BNB | Payout: x${bearPayout}\n` +
        `üè¶ Treasury fee: ${ethers.formatEther(treasuryFee)} BNB`;

      this.telegramService.sendMessage(
        this.config.get('RECEIVER_TELEGRAM_ID'),
        message,
      );

      // –£–º–µ–Ω—å—à–∞–µ–º cooldown –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤
      Object.keys(this.streamCooldowns).forEach((streamId) => {
        if (this.streamCooldowns[streamId] > 0) {
          this.streamCooldowns[streamId]--;
          if (this.streamCooldowns[streamId] === 0) {
            const stream = this.activeStreams.find(
              (s) => s.id === parseInt(streamId),
            );
            if (stream) {
              stream.active = true;
              stream.currentAmount = this.baseBetAmount;
              stream.consecutiveLosses = 0;
              stream.lossCount = 0;
              this.sendTelegramMessage(
                `üîÑ Stream #${streamId} reactivated after cooldown`,
              );
            }
          }
        }
      });
    });

    this.contract.on('EndRound', async (epoch) => {
      const betsForRound = this.betHistory.filter(
        (b) => b.epoch === Number(epoch),
      );
      if (betsForRound.length > 0) {
        await this.handleRoundResult(Number(epoch));
      }
    });

    this.provider.on('error', (error) => {
      this.logger.error('Provider error:', error);
      this.sendTelegramMessage(`‚ö†Ô∏è Provider error: ${error.message}`);
    });
  }

  private async updateBnbPrice(): Promise<void> {
    try {
      const response = await axios.get(
        'https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT',
      );
      this.currentBnbPrice = parseFloat(response.data.price);
    } catch (error) {
      this.logger.error('Failed to update BNB price', error);
    }
  }

  private startBnbPriceUpdater(): void {
    setInterval(async () => {
      await this.updateBnbPrice();
    }, 60_000);
    this.updateBnbPrice();
  }

  private startDailyReset(): void {
    const now = new Date();
    const nextReset = new Date(now);
    nextReset.setUTCHours(24, 0, 0, 0);

    const initialDelay = nextReset.getTime() - now.getTime();

    this.dailyResetTimer = setTimeout(() => {
      this.dailyPnL = 0;
      this.sendTelegramMessage('üîÑ Daily PnL reset to $0.00');
      setInterval(() => {
        this.dailyPnL = 0;
        this.sendTelegramMessage('üîÑ Daily PnL reset to $0.00');
      }, 86_400_000);
    }, initialDelay);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è
  private calculateAdaptiveMultiplier(stream: BetStream): bigint {
    if (stream.totalBets < 10) {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
      return this.BASE_LOSS_MULTIPLIER;
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–Ω—Ä–µ–π—Ç (0-100)
    const winRate = (stream.totalWins * 100) / stream.totalBets;

    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:
    // - –ï—Å–ª–∏ –≤–∏–Ω—Ä–µ–π—Ç –≤—ã—Å–æ–∫–∏–π (>55%), –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    // - –ï—Å–ª–∏ –≤–∏–Ω—Ä–µ–π—Ç –Ω–∏–∑–∫–∏–π (<45%), –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    // - –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å

    if (winRate > 55) {
      return this.BASE_LOSS_MULTIPLIER + 2n; // 2.3x –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞
    } else if (winRate < 45) {
      return this.BASE_LOSS_MULTIPLIER - 3n; // 1.8x –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞
    } else {
      return this.BASE_LOSS_MULTIPLIER; // 2.1x —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    }
  }

  private async handleRoundResult(epoch: number) {
    const round = await this.getRoundData(epoch);
    const betsForRound = this.betHistory.filter((b) => b.epoch === epoch);

    for (const bet of betsForRound) {
      const stream = this.activeStreams.find((s) => s.id === bet.streamId);
      if (!stream) continue;

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å—Ç—Ä–∏–º–∞
      stream.totalBets++;

      const isWin = this.checkSingleBetResult(bet, round);
      const resultEmoji = isWin ? '‚úÖ' : '‚ùå';

      // Calculate USD value of bet
      const betAmountUsd =
        parseFloat(ethers.formatEther(bet.amount)) * this.currentBnbPrice;

      if (isWin) {
        stream.totalWins++;
        stream.winCount++;
        stream.consecutiveLosses = 0;
        const reward = await this.calculateReward(bet);
        const usdReward = reward * this.currentBnbPrice;
        this.dailyPnL += usdReward;

        this.sendTelegramMessage(
          `üìà Daily PnL Update: $${this.dailyPnL.toFixed(2)}\n` +
            `üìä Current BNB Price: $${this.currentBnbPrice.toFixed(2)}`,
        );
      } else {
        stream.consecutiveLosses++;
        stream.winCount = 0;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
        if (stream.consecutiveLosses >= this.MAX_CONSECUTIVE_LOSSES) {
          stream.active = false;
          this.streamCooldowns[stream.id] = this.STREAM_COOLDOWN_ROUNDS;
          this.sendTelegramMessage(
            `‚ö†Ô∏è Stream #${stream.id} deactivated due to ${stream.consecutiveLosses} consecutive losses.\n` +
              `Will be reactivated after ${this.STREAM_COOLDOWN_ROUNDS} rounds.`,
          );
        }

        // Decrement PnL when bet loses - subtract the bet amount
        this.dailyPnL -= betAmountUsd;

        this.sendTelegramMessage(
          `üìâ Daily PnL Update: $${this.dailyPnL.toFixed(2)}\n` +
            `üìä Current BNB Price: $${this.currentBnbPrice.toFixed(2)}`,
        );
      }

      const message =
        `${resultEmoji} Stream #${stream.id} ${isWin ? 'WON' : 'LOST'} round #${epoch}\n` +
        `üí∞ Bet: ${ethers.formatEther(bet.amount)} BNB on ${bet.position}\n` +
        `üìâ Loss Streak: ${stream.lossCount}/${stream.consecutiveLosses}\n` +
        `üìä Win Rate: ${((stream.totalWins / stream.totalBets) * 100).toFixed(1)}% (${stream.totalWins}/${stream.totalBets})`;

      this.sendTelegramMessage(message);

      if (isWin) {
        await this.claimSingleBet(bet);
        stream.currentAmount = this.baseBetAmount;
        stream.lossCount = 0;
      } else {
        stream.lossCount++;
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 2 –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π –ø–æ–¥—Ä—è–¥
        if (stream.lossCount >= 2) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
          const adaptiveMultiplier = this.calculateAdaptiveMultiplier(stream);
          stream.currentAmount =
            (stream.currentAmount * adaptiveMultiplier) / 10n;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é
          if (stream.currentAmount > this.maxBetAmount) {
            stream.currentAmount = this.maxBetAmount;
            this.sendTelegramMessage(
              `‚ö†Ô∏è Stream #${stream.id} bet size capped at ${ethers.formatEther(this.maxBetAmount)} BNB (${this.MAX_BET_PERCENTAGE * 100}% of bankroll)`,
            );
          }

          this.sendTelegramMessage(
            `üîÑ Stream #${stream.id} using multiplier: ${adaptiveMultiplier / 10n}.${adaptiveMultiplier % 10n}x\n` +
              `New bet size: ${ethers.formatEther(stream.currentAmount)} BNB`,
          );

          stream.lossCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
        }
      }

      stream.positionHistory = [
        ...stream.positionHistory.slice(-4),
        bet.position,
      ];
    }

    const streamsStatus = this.activeStreams
      .map(
        (stream) =>
          `üìä Stream #${stream.id}: ${ethers.formatEther(stream.currentAmount)} BNB\n` +
          `üìâ Losses: ${stream.lossCount}/${stream.consecutiveLosses}\n` +
          `üèÜ Win Rate: ${((stream.totalWins / stream.totalBets) * 100).toFixed(1)}%\n` +
          `üö¶ Status: ${stream.active ? 'Active' : 'Cooldown: ' + this.streamCooldowns[stream.id] + ' rounds'}`,
      )
      .join('\n\n');

    this.sendTelegramMessage(
      `üîÑ Streams status after round #${epoch}:\n\n${streamsStatus}`,
    );
  }

  private async calculateReward(bet: BetHistory): Promise<number> {
    try {
      const round = await this.getRoundData(bet.epoch);

      // If the round wasn't won by bet's position, return 0
      if (
        (bet.position === 'Bull' && round.closePrice <= round.lockPrice) ||
        (bet.position === 'Bear' && round.closePrice >= round.lockPrice)
      ) {
        return 0;
      }

      // Get the actual amounts from the contract
      const totalAmount = parseFloat(ethers.formatEther(round.totalAmount));
      const positionAmount = parseFloat(
        ethers.formatEther(
          bet.position === 'Bull' ? round.bullAmount : round.bearAmount,
        ),
      );

      // Calculate treasury fee (3%)
      const treasuryFee = totalAmount * 0.03;
      const rewardPool = totalAmount - treasuryFee;

      // Calculate the payout ratio for this position
      const payoutRatio = rewardPool / positionAmount;

      // Calculate the actual reward for this bet
      const betAmount = parseFloat(ethers.formatEther(bet.amount));
      const reward = betAmount * payoutRatio;

      return reward;
    } catch (error) {
      this.logger.error('Reward calculation failed', error);
      return 0;
    }
  }

  private async claimSingleBet(bet: BetHistory) {
    if (bet.claimed) return;

    try {
      const tx = await this.contract.claim([bet.epoch]);
      await tx.wait();

      bet.claimed = true;
      const totalReward = await this.calculateReward(bet);

      // –í—ã—á–∏—Å–ª—è–µ–º —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
      const betAmountBnb = parseFloat(ethers.formatEther(bet.amount));
      const netProfitBnb = totalReward - betAmountBnb;
      const netProfitUsd = netProfitBnb * this.currentBnbPrice;

      // –î–æ–±–∞–≤–ª—è–µ–º –∫ PnL —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å
      this.dailyPnL += netProfitUsd;

      this.sendTelegramMessage(
        `üèÜ Claimed reward for round ${bet.epoch}\n` +
          `üí∞ Total Reward: $${(totalReward * this.currentBnbPrice).toFixed(2)}\n` +
          `üíπ Net Profit: $${netProfitUsd.toFixed(2)} (${netProfitBnb.toFixed(6)} BNB)\n` +
          `üìà Total Daily PnL: $${this.dailyPnL.toFixed(2)}\n` +
          `Tx: ${tx.hash}`,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞
      await this.updateMaxBetAmount();
    } catch (error) {
      this.sendTelegramMessage(
        `‚ö†Ô∏è Failed to claim round ${bet.epoch}: ${error.message}`,
      );
    }
  }

  private checkSingleBetResult(bet: BetHistory, round: Round): boolean {
    if (!round.oracleCalled) return false;
    return (
      (bet.position === 'Bull' && round.closePrice > round.lockPrice) ||
      (bet.position === 'Bear' && round.closePrice < round.lockPrice)
    );
  }

  private async startBettingStrategy() {
    setInterval(async () => {
      try {
        const currentEpoch = Number(await this.contract.currentEpoch());
        const nextEpoch = currentEpoch + 1;

        const currentRound = await this.getRoundData(currentEpoch);
        const nextRound = await this.getRoundData(nextEpoch);

        const bettingRound = this.isRoundBettable(nextRound)
          ? nextRound
          : currentRound;

        if (this.isBettable(bettingRound)) {
          const stream = this.selectStreamForBet(bettingRound.epoch);
          if (stream) {
            await this.placeBet(bettingRound.epoch, stream);
          }
        }
      } catch (error) {
        this.sendTelegramMessage(
          `‚ùå Strategy error: ${error.reason || error.message}`,
        );
      }
    }, 1_000);
  }

  private selectStreamForBet(epoch: number): BetStream | null {
    const availableStreams = this.activeStreams.filter((stream) => {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∏–º–∞
      const isAvailable =
        stream.active &&
        stream.lastEpoch !== epoch &&
        !this.betHistory.some(
          (b) => b.epoch === epoch && b.streamId === stream.id,
        );
      return isAvailable;
    });

    if (availableStreams.length === 0) return null;

    const selectedIndex = this.lastUsedStreamIndex % availableStreams.length;
    this.lastUsedStreamIndex++;
    return availableStreams[selectedIndex];
  }

  private isRoundBettable(round: Round): boolean {
    const now = Math.floor(Date.now() / 1000);
    return (
      round.startTimestamp <= now &&
      now < round.lockTimestamp &&
      !round.oracleCalled
    );
  }

  private isBettable(round: Round): boolean {
    const now = Math.floor(Date.now() / 1000);
    return (
      now >= round.lockTimestamp - this.BET_SECONDS_BEFORE_END &&
      now < round.lockTimestamp &&
      this.isRoundBettable(round) &&
      !this.hasExistingBet(round.epoch)
    );
  }

  private hasExistingBet(epoch: number): boolean {
    return this.betHistory.some((b) => b.epoch === epoch && !b.claimed);
  }

  private async getRoundData(epoch: number): Promise<Round> {
    const roundData = await this.contract.rounds(epoch);
    const now = Math.floor(Date.now() / 1000);

    return {
      epoch: Number(roundData.epoch),
      startTimestamp: Number(roundData.startTimestamp),
      lockTimestamp: Number(roundData.lockTimestamp),
      closeTimestamp: Number(roundData.closeTimestamp),
      lockPrice: BigInt(roundData.lockPrice),
      closePrice: BigInt(roundData.closePrice),
      totalAmount: BigInt(roundData.totalAmount),
      bullAmount: BigInt(roundData.bullAmount),
      bearAmount: BigInt(roundData.bearAmount),
      oracleCalled: roundData.oracleCalled,
      canBet: now < Number(roundData.lockTimestamp) && !roundData.oracleCalled,
    };
  }

  private async placeBet(epoch: number, stream: BetStream) {
    const round = await this.getRoundData(epoch);
    const position = this.calculateBetPosition(round);

    if (await this.hasSufficientBalance(stream.currentAmount)) {
      try {
        const method = position === 'Bull' ? 'betBull' : 'betBear';
        const tx = await this.contract[method](epoch, {
          value: stream.currentAmount,
        });

        this.betHistory.push({
          epoch,
          position,
          amount: stream.currentAmount,
          claimed: false,
          streamId: stream.id,
        });

        stream.lastEpoch = epoch;

        await tx.wait(1);
        this.sendTelegramMessage(
          `üé≤ Stream #${stream.id} bet ${ethers.formatEther(stream.currentAmount)} BNB on ${position} (#${epoch}) | Tx: ${tx.hash}`,
        );
      } catch (error) {
        this.sendTelegramMessage(
          `‚ö†Ô∏è Stream #${stream.id} bet error: ${error.reason || error.message}`,
        );
      }
    }
  }

  private calculateBetPosition(round: Round): 'Bull' | 'Bear' {
    return round.bullAmount < round.bearAmount ? 'Bull' : 'Bear';
  }

  private async hasSufficientBalance(betAmount: bigint): Promise<boolean> {
    const balance = await this.provider.getBalance(this.wallet.address);
    if (balance < betAmount) {
      this.sendTelegramMessage(
        `‚ö†Ô∏è Insufficient balance for bet: ${ethers.formatEther(betAmount)} BNB`,
      );
      return false;
    }
    return true;
  }

  private sendTelegramMessage(message: string) {
    this.telegramService.sendMessage(
      this.config.get('RECEIVER_TELEGRAM_ID'),
      message,
    );
  }
}
